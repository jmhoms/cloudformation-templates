AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Nextcloud All-in-One on Spot in a single AZ with:
    - EFS for user data
    - EBS volume for Docker data
    - Automatic EIP
    - IAM policy with Condition Keys
    - All possible resources tagged "NextcloudAIO=true" for cost monitoring
    - "lowest-price" Spot strategy

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID to deploy into

  SubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: Subnet in the same AZ as the EBS volume (single-AZ deployment)

  SubnetAZ:
    Type: String
    Description: Availability Zone of the above Subnet (e.g. "eu-west-1a")

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: EC2 Key Pair for SSH access

  InstanceType:
    Type: String
    Default: t3a.medium
    Description: EC2 Spot instance type

  DesiredCapacity:
    Type: Number
    Default: 1
    Description: Desired number of Nextcloud instances

  MaxCapacity:
    Type: Number
    Default: 1
    Description: Maximum number of Nextcloud instances in the ASG

  DockerVolumeSize:
    Type: Number
    Default: 30
    Description: Size (GB) of the EBS volume for Docker data

Mappings:
  # Update with valid Ubuntu AMIs for your region(s):
  RegionMap:
    eu-west-1:
      AMI: "ami-03fd334507439f4d1"
    us-east-1:
      AMI: "ami-04b4f1a9cf54c11d0"

Resources:
  ####################################################
  # 1) Security Groups
  ####################################################
  NextcloudInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow 80,443,8080 inbound
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: NextcloudInstanceSG
        - Key: NextcloudAIO
          Value: "true"

  NextcloudEFSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EFS SG (allow NFS only from Nextcloud SG)
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          SourceSecurityGroupId: !Ref NextcloudInstanceSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: NextcloudEFSSG
        - Key: NextcloudAIO
          Value: "true"

  ####################################################
  # 2) EFS (Nextcloud user data)
  ####################################################
  NextcloudEFS:
    Type: AWS::EFS::FileSystem
    Properties:
      Encrypted: true
      FileSystemTags:
        - Key: Name
          Value: NextcloudEFS
        - Key: NextcloudAIO
          Value: "true"

  NextcloudEFSMountTarget:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref NextcloudEFS
      SubnetId: !Ref SubnetId
      SecurityGroups:
        - !Ref NextcloudEFSSecurityGroup
    # EFS MountTarget does NOT support custom "Tags", so we skip it.

  ####################################################
  # 3) Elastic IP
  ####################################################
  NextcloudEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: NextcloudEIP
        - Key: NextcloudAIO
          Value: "true"

  ####################################################
  # 4) EBS Volume for Docker
  ####################################################
  NextcloudDockerVolume:
    Type: AWS::EC2::Volume
    Properties:
      AvailabilityZone: !Ref SubnetAZ
      Size: !Ref DockerVolumeSize
      VolumeType: gp3
      Encrypted: true
      Tags:
        - Key: Name
          Value: NextcloudDockerVolume
        - Key: NextcloudAIO
          Value: "true"

  ####################################################
  # 5) IAM Role & Policy (Condition Keys + Resource Tags)
  ####################################################
  NextcloudRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      Tags:
        - Key: Name
          Value: NextcloudRole
        - Key: NextcloudAIO
          Value: "true"

  NextcloudPolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: NextcloudEC2Access
      Roles:
        - !Ref NextcloudRole
      PolicyDocument:
        Fn::Sub:
          - |
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "AssociateEIP",
                  "Effect": "Allow",
                  "Action": [
                    "ec2:AssociateAddress",
                    "ec2:DisassociateAddress"
                  ],
                  "Resource": [
                    "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:elastic-ip/${EIPAllocationId}",
                    "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*"
                  ],
                  "Condition": {
                    "StringEquals": {
                      "ec2:ResourceTag/NextcloudAIO": "true"
                    }
                  }
                },
                {
                  "Sid": "AttachAndDescribeVolume",
                  "Effect": "Allow",
                  "Action": [
                    "ec2:AttachVolume",
                    "ec2:DescribeVolumes",
                    "ec2:DescribeVolumeAttribute"
                  ],
                  "Resource": [
                    "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:volume/${DockerVolumeId}",
                    "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*"
                  ],
                  "Condition": {
                    "StringEquals": {
                      "ec2:ResourceTag/NextcloudAIO": "true"
                    }
                  }
                },
                {
                  "Sid": "DescribeEC2",
                  "Effect": "Allow",
                  "Action": [
                    "ec2:DescribeInstances",
                    "ec2:DescribeAddresses"
                  ],
                  "Resource": "*"
                },
                {
                  "Sid": "EFSClientAccess",
                  "Effect": "Allow",
                  "Action": [
                    "efs:ClientMount",
                    "efs:ClientRootAccess",
                    "efs:DescribeMountTargets"
                  ],
                  "Resource": "arn:aws:elasticfilesystem:${AWS::Region}:${AWS::AccountId}:file-system/${EFSFileSystemId}"
                }
              ]
            }
          - {
              EIPAllocationId: !GetAtt NextcloudEIP.AllocationId,
              DockerVolumeId: !Ref NextcloudDockerVolume,
              EFSFileSystemId: !Ref NextcloudEFS
            }

  NextcloudInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref NextcloudRole
      # IAM InstanceProfile does NOT have a "Tags" property.

  ####################################################
  # 6) Launch Template (Tagged)
  ####################################################
  NextcloudLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    DependsOn:
      - NextcloudEFS
      - NextcloudEIP
    Properties:
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt NextcloudInstanceProfile.Arn
        ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
        InstanceType: !Ref InstanceType
        KeyName: !Ref KeyName
        SecurityGroupIds:
          - !Ref NextcloudInstanceSecurityGroup

        MetadataOptions:
          HttpTokens: required
          HttpEndpoint: enabled
          HttpPutResponseHopLimit: 2

        BlockDeviceMappings:
          - DeviceName: "/dev/sda1"
            Ebs:
              VolumeSize: 8
              VolumeType: gp3
              DeleteOnTermination: true
              Encrypted: true

        # Tag the Launch Template itself, plus the Instances it creates
        TagSpecifications:
          - ResourceType: launch-template
            Tags:
              - Key: Name
                Value: NextcloudLaunchTemplate
              - Key: NextcloudAIO
                Value: "true"
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: NextcloudAIO-Instance
              - Key: NextcloudAIO
                Value: "true"

        UserData:
          Fn::Base64:
            Fn::Sub:
              - |
                #!/bin/bash
                set -euxo pipefail
                exec > /var/log/user-data.log 2>&1

                # 1) Basic Tools
                apt-get update -y
                snap install aws-cli --classic
                apt-get install -y ca-certificates curl gnupg nfs-common

                # 2) Instance ID from IMDSv2 fallback
                TOKEN=$(curl -X PUT -s -H "X-aws-ec2-metadata-token-ttl-seconds: 21600" \
                  http://169.254.169.254/latest/api/token || true)
                if [ -n "$TOKEN" ]; then
                  INSTANCE_ID=$(curl -s -H "X-aws-ec2-metadata-token: $TOKEN" \
                    http://169.254.169.254/latest/meta-data/instance-id)
                else
                  INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
                fi
                echo "Instance ID: $INSTANCE_ID"

                # 3) Associate EIP
                aws ec2 associate-address \
                  --allocation-id ${EIPAllocationId} \
                  --instance-id "$INSTANCE_ID" \
                  --region ${AWSRegion} \
                  --allow-reassociation || echo "EIP association failed"

                # 4) Attach EBS Volume (/dev/sdf)
                aws ec2 attach-volume \
                  --volume-id ${DockerVolumeId} \
                  --instance-id "$INSTANCE_ID" \
                  --device /dev/sdf \
                  --region ${AWSRegion} || echo "Volume attach may have failed"

                for i in {1..10}; do
                  if [ -e /dev/sdf ]; then
                    echo "Found /dev/sdf"
                    break
                  fi
                  sleep 3
                done

                if ! blkid /dev/sdf; then
                  echo "Formatting new volume as ext4"
                  mkfs.ext4 /dev/sdf
                fi

                mkdir -p /var/lib/docker
                if ! grep -qs '/var/lib/docker ' /etc/fstab; then
                  echo "/dev/sdf /var/lib/docker ext4 defaults 0 0" >> /etc/fstab
                fi
                mount -a || echo "Mount -a failed"

                # 5) Install Docker
                install -m 0755 -d /etc/apt/keyrings
                curl -fsSL https://download.docker.com/linux/ubuntu/gpg | tee /etc/apt/keyrings/docker.asc > /dev/null
                chmod a+r /etc/apt/keyrings/docker.asc
                echo "deb [signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" \
                  > /etc/apt/sources.list.d/docker.list
                apt-get update -y
                apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
                systemctl enable docker
                systemctl start docker

                # 6) EFS for Nextcloud user data
                mkdir -p /mnt/nextcloud
                if ! grep -qs '/mnt/nextcloud ' /etc/fstab; then
                  echo "${EFSId}.efs.${AWSRegion}.amazonaws.com:/ /mnt/nextcloud nfs4 defaults 0 0" >> /etc/fstab
                fi
                mount -a || echo "EFS mount failed"

                # 7) Pull & run Nextcloud AIO
                for i in {1..5}; do
                  docker pull nextcloud/all-in-one:latest && break
                  sleep 5
                done

                docker run --restart always -d \
                  --name nextcloud-aio-mastercontainer \
                  -p 8080:8080 \
                  -e NEXTCLOUD_DATADIR="/mnt/nextcloud" \
                  -v nextcloud_aio_mastercontainer:/var/lib/docker-aio-config \
                  -v /var/run/docker.sock:/var/run/docker.sock:ro \
                  --privileged \
                  nextcloud/all-in-one:latest
              - {
                  EIPAllocationId: !GetAtt NextcloudEIP.AllocationId,
                  DockerVolumeId: !Ref NextcloudDockerVolume,
                  EFSId: !Ref NextcloudEFS,
                  AWSRegion: !Ref AWS::Region
                }

  ####################################################
  # 7) Auto Scaling Group (Spot) - Single Subnet
  ####################################################
  NextcloudASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref SubnetId

      MixedInstancesPolicy:
        InstancesDistribution:
          OnDemandAllocationStrategy: "lowest-price"
          OnDemandBaseCapacity: 0
          SpotAllocationStrategy: "lowest-price"
          SpotInstancePools: 2
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref NextcloudLaunchTemplate
            Version: !GetAtt NextcloudLaunchTemplate.LatestVersionNumber

      MinSize: 0
      DesiredCapacity: !Ref DesiredCapacity
      MaxSize: !Ref MaxCapacity

      Tags:
        - Key: Name
          Value: NextcloudAIO
          PropagateAtLaunch: true
        - Key: NextcloudAIO
          Value: "true"
          PropagateAtLaunch: true

    UpdatePolicy:
      AutoScalingRollingUpdate:
        PauseTime: PT0S
        MaxBatchSize: 1
        MinInstancesInService: 0

Outputs:
  NextcloudEIPAllocationId:
    Description: EIP Allocation ID
    Value: !GetAtt NextcloudEIP.AllocationId

  NextcloudASGName:
    Description: Auto Scaling Group Name
    Value: !Ref NextcloudASG

  NextcloudVolumeId:
    Description: EBS Volume for Docker
    Value: !Ref NextcloudDockerVolume

  NextcloudEFSId:
    Description: EFS FileSystem
    Value: !Ref NextcloudEFS
