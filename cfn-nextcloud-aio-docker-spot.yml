AWSTemplateFormatVersion: '2010-09-09'
Description: Nextcloud All-in-One on Spot instance with EFS, EBS, EIP, and IAM policies.

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID to deploy into

  SubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: Subnet in the same AZ as the EBS volume (single-AZ deployment)

  SubnetAZ:
    Type: String
    Description: Availability Zone of the Subnet (e.g., "eu-west-1a")

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: EC2 Key Pair for SSH access

  InstanceType:
    Type: String
    Default: t3a.medium
    Description: EC2 Spot instance type

  DesiredCapacity:
    Type: Number
    Default: 1
    Description: Desired number of Nextcloud instances

  MaxCapacity:
    Type: Number
    Default: 1
    Description: Maximum number of Nextcloud instances in the ASG

  DockerVolumeSize:
    Type: Number
    Default: 30
    Description: Size (GB) of the EBS volume for Docker data

Mappings:
  RegionMap:
    eu-west-1:
      AMI: "ami-03fd334507439f4d1"
    us-east-1:
      AMI: "ami-04b4f1a9cf54c11d0"

Resources:
  NextcloudInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow 80,443,8080 inbound
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: NextcloudInstanceSG
        - Key: NextcloudAIO
          Value: "true"

  NextcloudEFSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EFS SG (allow NFS only from Nextcloud SG)
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          SourceSecurityGroupId: !Ref NextcloudInstanceSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: NextcloudEFSSG
        - Key: NextcloudAIO
          Value: "true"

  NextcloudEFS:
    Type: AWS::EFS::FileSystem
    Properties:
      Encrypted: true
      FileSystemTags:
        - Key: Name
          Value: NextcloudEFS
        - Key: NextcloudAIO
          Value: "true"

  NextcloudEFSMountTarget:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref NextcloudEFS
      SubnetId: !Ref SubnetId
      SecurityGroups:
        - !Ref NextcloudEFSSecurityGroup

  NextcloudEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: NextcloudEIP
        - Key: NextcloudAIO
          Value: "true"

  NextcloudDockerVolume:
    Type: AWS::EC2::Volume
    Properties:
      AvailabilityZone: !Ref SubnetAZ
      Size: !Ref DockerVolumeSize
      VolumeType: gp3
      Encrypted: true
      Tags:
        - Key: Name
          Value: NextcloudDockerVolume
        - Key: NextcloudAIO
          Value: "true"

  NextcloudRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      Tags:
        - Key: Name
          Value: NextcloudRole
        - Key: NextcloudAIO
          Value: "true"

  NextcloudPolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: NextcloudEC2Access
      Roles:
        - !Ref NextcloudRole
      PolicyDocument:
        Fn::Sub:
          - |
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "AssociateEIP",
                  "Effect": "Allow",
                  "Action": [
                    "ec2:AssociateAddress",
                    "ec2:DisassociateAddress"
                  ],
                  "Resource": [
                    "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:elastic-ip/${EIPAllocationId}",
                    "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*"
                  ],
                  "Condition": {
                    "StringEquals": {
                      "ec2:ResourceTag/NextcloudAIO": "true"
                    }
                  }
                },
                {
                  "Sid": "AttachAndDescribeVolume",
                  "Effect": "Allow",
                  "Action": [
                    "ec2:AttachVolume",
                    "ec2:DescribeVolumes",
                    "ec2:DescribeVolumeAttribute"
                  ],
                  "Resource": [
                    "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:volume/${DockerVolumeId}",
                    "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*"
                  ],
                  "Condition": {
                    "StringEquals": {
                      "ec2:ResourceTag/NextcloudAIO": "true"
                    }
                  }
                },
                {
                  "Sid": "DescribeEC2",
                  "Effect": "Allow",
                  "Action": [
                    "ec2:DescribeInstances",
                    "ec2:DescribeAddresses"
                  ],
                  "Resource": "*"
                },
                {
                  "Sid": "EFSClientAccess",
                  "Effect": "Allow",
                  "Action": [
                    "efs:ClientMount",
                    "efs:ClientRootAccess",
                    "efs:DescribeMountTargets"
                  ],
                  "Resource": "arn:aws:elasticfilesystem:${AWS::Region}:${AWS::AccountId}:file-system/${EFSFileSystemId}"
                }
              ]
            }
          - {
              EIPAllocationId: !GetAtt NextcloudEIP.AllocationId,
              DockerVolumeId: !Ref NextcloudDockerVolume,
              EFSFileSystemId: !Ref NextcloudEFS
            }

  NextcloudInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref NextcloudRole

  NextcloudLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt NextcloudInstanceProfile.Arn
        ImageId: !FindInMap [RegionMap, !Ref AWS::Region, AMI]
        InstanceType: !Ref InstanceType
        KeyName: !Ref KeyName
        SecurityGroupIds:
          - !Ref NextcloudInstanceSecurityGroup
        MetadataOptions:
          HttpTokens: required
          HttpEndpoint: enabled
          HttpPutResponseHopLimit: 2
        BlockDeviceMappings:
          - DeviceName: "/dev/sda1"
            Ebs:
              VolumeSize: 8
              VolumeType: gp3
              DeleteOnTermination: true
              Encrypted: true
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: NextcloudAIO-Instance
              - Key: NextcloudAIO
                Value: "true"
        UserData:
          Fn::Base64:
            Fn::Sub:
              - |
                #!/bin/bash
                set -euxo pipefail
                exec > /var/log/user-data.log 2>&1
                
                CHECK_INTERVAL=10
                CHECK_LIMIT=12
                VOLUME_ID="${DockerVolumeId}"
                REGION="${AWSRegion}"
                
                function volume_in_use() {
                  local usage
                  usage=$(aws ec2 describe-volumes \
                    --volume-ids "$${VOLUME_ID}" \
                    --region "$${REGION}" \
                    --query "Volumes[0].Attachments[?State!='detached']" \
                    --output json)
                  [ "$usage" != "[]" ]
                }
                
                function wait_for_free_or_timeout() {
                  local attempt=1
                  while [ $attempt -le $CHECK_LIMIT ]; do
                    if volume_in_use; then
                      echo "Volume is still in use (attempt $attempt/$CHECK_LIMIT)"
                      sleep $CHECK_INTERVAL
                      ((attempt++))
                    else
                      echo "Volume is not in use!"
                      return 0
                    fi
                  done
                  return 1
                }
                
                apt-get update -y
                snap install aws-cli --classic
                apt-get install -y ca-certificates curl gnupg nfs-common
                
                TOKEN=$(curl -X PUT -s -H "X-aws-ec2-metadata-token-ttl-seconds: 21600" \
                  http://169.254.169.254/latest/api/token || true)
                INSTANCE_ID=$(curl -s -H "X-aws-ec2-metadata-token: $TOKEN" \
                  http://169.254.169.254/latest/meta-data/instance-id || curl -s http://169.254.169.254/latest/meta-data/instance-id)
                echo "Instance ID: $INSTANCE_ID"
                
                if ! wait_for_free_or_timeout; then
                  echo "Volume $VOLUME_ID is still in use after 2 minutes. Forcing detach..."
                  aws ec2 detach-volume --volume-id "$VOLUME_ID" --region "$REGION" --force
                  if ! wait_for_free_or_timeout; then
                    echo "Volume $VOLUME_ID still in use after force detach. Exiting!"
                    exit 1
                  fi
                fi
                
                echo "Attaching volume $VOLUME_ID to instance $INSTANCE_ID"
                aws ec2 attach-volume \
                  --volume-id "$VOLUME_ID" \
                  --instance-id "$INSTANCE_ID" \
                  --device /dev/sdf \
                  --region "$REGION" || echo "Attach failed, continuing..."
                
                SYMLINK="/dev/disk/by-id/nvme-Amazon_Elastic_Block_Store_${VOLUME_ID}"
                for i in {1..10}; do
                  if [ -e "$SYMLINK" ]; then
                    FOUND_DEVICE=$(readlink -f "$SYMLINK")
                    break
                  fi
                  sleep 3
                done
                
                if [ -n "$FOUND_DEVICE" ]; then
                  if ! blkid "$FOUND_DEVICE"; then
                    mkfs.ext4 "$FOUND_DEVICE"
                  fi
                  mkdir -p /var/lib/docker
                  grep -qs '/var/lib/docker ' /etc/fstab || echo "$FOUND_DEVICE /var/lib/docker ext4 defaults 0 0" >> /etc/fstab
                  mount -a || true
                fi
                
                aws ec2 associate-address \
                  --allocation-id "${EIPAllocationId}" \
                  --instance-id "$INSTANCE_ID" \
                  --region "$REGION" \
                  --allow-reassociation || echo "EIP association failed"
                
                apt-get update -y
                apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
                systemctl enable docker --now
                
                mkdir -p /mnt/nextcloud
                grep -qs '/mnt/nextcloud ' /etc/fstab || echo "${EFSId}.efs.${AWSRegion}.amazonaws.com:/ /mnt/nextcloud nfs4 defaults 0 0" >> /etc/fstab
                mount -a || true
                
                docker pull nextcloud/all-in-one:latest
                docker run -d --name nextcloud-aio-mastercontainer \
                  -p 8080:8080 \
                  -e NEXTCLOUD_DATADIR="/mnt/nextcloud" \
                  -v nextcloud_aio_mastercontainer:/var/lib/docker-aio-config \
                  -v /var/run/docker.sock:/var/run/docker.sock:ro \
                  --privileged \
                  nextcloud/all-in-one:latest
              - {
                  EIPAllocationId: !GetAtt NextcloudEIP.AllocationId,
                  DockerVolumeId: !Ref NextcloudDockerVolume,
                  EFSId: !Ref NextcloudEFS,
                  AWSRegion: !Ref AWS::Region
                }

  NextcloudASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: [!Ref SubnetId]
      MixedInstancesPolicy:
        InstancesDistribution:
          OnDemandAllocationStrategy: lowest-price
          OnDemandBaseCapacity: 0
          SpotAllocationStrategy: lowest-price
          SpotInstancePools: 2
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref NextcloudLaunchTemplate
            Version: !GetAtt NextcloudLaunchTemplate.LatestVersionNumber
      MinSize: 0
      DesiredCapacity: !Ref DesiredCapacity
      MaxSize: !Ref MaxCapacity
      Tags:
        - Key: Name
          Value: NextcloudAIO
          PropagateAtLaunch: true
        - Key: NextcloudAIO
          Value: "true"
          PropagateAtLaunch: true
    UpdatePolicy:
      AutoScalingRollingUpdate:
        PauseTime: PT0S
        MaxBatchSize: 1
        MinInstancesInService: 0

Outputs:
  NextcloudEIPAllocationId:
    Value: !GetAtt NextcloudEIP.AllocationId
  NextcloudASGName:
    Value: !Ref NextcloudASG
  NextcloudVolumeId:
    Value: !Ref NextcloudDockerVolume
  NextcloudEFSId:
    Value: !Ref NextcloudEFS
